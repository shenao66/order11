module order(
    input   wire        sys_clk,
    input   wire        sys_rst_n,
    input   wire [7:0]  po_data,
    input   wire        po_flag,
    output  reg  read,
    output  reg [351:0]memory_data[0:2]
);


reg [351:0] data ;
reg [7:0]  address;
/*always @(posedge sys_clk ,negedge sys_rst_n) 
begin
    if(~sys_rst_n)
        frame <=408'd0;
    else if (po_flag )
        frame <= {frame[399:0],po_data};
    else
        frame <= frame;
end*/
 





reg [7:0] cnt_comma;    //���ż�����
always @(posedge sys_clk , negedge sys_rst_n) 
begin
    if(~sys_rst_n)
        cnt_comma <= 8'd0;
    else if(po_flag && po_data == 8'hea) 
        cnt_comma <= 8'd0;
    else if(po_flag) 
        cnt_comma <= cnt_comma + 8'd1;
    else
        cnt_comma <= cnt_comma;
end
 reg [7:0] state;
parameter idle = 8'd0;  //ea
parameter s0  = 8'd1 ;  //eb/60
parameter s1  = 8'd2 ;  //ea
parameter s2  = 8'd3 ;  //ea



always @(posedge sys_clk , negedge sys_rst_n) 
begin
    if(~sys_rst_n)
        begin
            state <= idle;
        end
    else 
        case (state)
            idle:
                begin
                    if(po_flag && po_data == 8'hea) //$
                        begin
                            state <= s0;
                        end
                    else
                        state <= state;
                end
            s0:
                begin
                    if(po_flag &&( po_data == 8'hea|| po_data == 8'h60)) //ea
                        begin
                            state <= s1;
                        end
                    else
                        state <= state;
                end 
            s1:
                begin
                    if(po_flag && po_data == 8'heb) //eb
                        begin
                            state <= s2;
                        end
                    else
                        state <= state;
                end
            s2:
                begin
                    if(po_flag && po_data == 8'heb) //eb
                        begin
                            state <= idle;
                        end
                    else
                        state <= state;
                end
            default: state <= idle;
        endcase
end

reg [7:0] address;
reg [351:0] data;
reg [16:0] address_arm;
always @(posedge sys_clk , negedge sys_rst_n) 
begin
    if(~sys_rst_n)
     begin
        address <= 8'h0;
        address_arm <= 16'd0;
        data    <= 352'd0;
      end
    else if(state <= idle)
      begin
          address <= 8'h0;
          address_arm <= 16'd0;
           data    <= 352'd0;
      end
    else if(po_flag && state == s1)
       begin
            case (cnt_comma)
                8'd0 : address_arm[15:8] <= po_data;
                8'd1 : address_arm[7:0] <= po_data;
                8'd2 : address[7:0] <= po_data;
                8'd3 : data[351:344] <= po_data;
                8'd4 : data[343:336] <= po_data;
                8'd5 : data[335:328] <= po_data;
                8'd6 : data[327:320] <= po_data;
                8'd7 : data[319:312] <= po_data;
                8'd8 : data[311:304] <= po_data;
                8'd9 : data[303:296] <= po_data;
                8'd10: data[295:288] <= po_data;
                8'd11: data[287:280] <= po_data;
                8'd12: data[279:272] <= po_data;
                8'd13: data[271:264] <= po_data;
                8'd14: data[263:256] <= po_data;
                8'd15: data[255:248] <= po_data;
                8'd16: data[247:240] <= po_data;
                8'd17: data[239:232] <= po_data;
                8'd18: data[231:224] <= po_data;
                8'd19: data[223:216] <= po_data;
                8'd20: data[215:208] <= po_data;
                8'd21: data[207:200] <= po_data;
                8'd22: data[199:192] <= po_data;
                8'd23: data[191:184] <= po_data;
                8'd24: data[183:176] <= po_data;
                8'd25: data[175:168] <= po_data;
                8'd26: data[167:160] <= po_data;
                8'd27: data[159:152] <= po_data;
                8'd28: data[151:144] <= po_data;
                8'd29: data[143:136] <= po_data;
                8'd30: data[135:128] <= po_data;
                8'd31: data[127:120] <= po_data;
                8'd32: data[119:112] <= po_data;
                8'd33: data[111:104] <= po_data;             
                8'd34: data[103:96] <= po_data;
                8'd35: data[95:88] <= po_data;
                8'd36: data[87:80] <= po_data;
                8'd37: data[79:72] <= po_data;
                8'd38: data[71:64] <= po_data;
                8'd39: data[63:56] <= po_data;
                8'd40: data[55:48] <= po_data;
                8'd41: data[47:40] <= po_data;
                8'd42: data[39:32] <= po_data;
                8'd43: data[31:24] <= po_data;
                8'd44: data[23:16] <= po_data;
                8'd45: data[15:8 ] <= po_data;
                8'd46: data[ 7:0 ] <= po_data;
                default: 
                begin 
                   address <= 8'h0;
                   data    <= 352'd0;
                   address_arm <= 16'd0;
                end
            endcase
       end

end
always @(posedge sys_clk , negedge sys_rst_n) 
    begin
        if(~sys_rst_n)
            begin
             read <= 1'd0;
             end
       else if (state==s2)
            begin
             read <= 1'd1;
            end
       else
           begin
             read <= 1'd0;
           end
    end


always @(posedge sys_clk , negedge sys_rst_n) 
    begin
        if(~sys_rst_n)
        memory_data[address][351:0 ]<=128'd0;
       else 
        memory_data[address] [351:0]<= data;
    end 




wire [7:0] probe_in0;
wire [7:0] address_select;
//wire [351:0]data_selected;
//assign data_selected = memory_data[address_select];
vio_0 your_instance_name (
  .clk(sys_clk),                // input wire clk
  .probe_in0(probe_in0),    // input wire [7 : 0] probe_in0
  .probe_out0(address_select)  // output wire [7 : 0] probe_out0
);
    
ila_2 your_instance_name1 (
	.clk(sys_clk), // input wire clk


	.probe0(memory_data[address_select][351:0]),
	.probe1(address), // input wire [351:0] probe0
    .probe2(data),
    .probe3(po_flag),
    .probe4(frame),
    .probe5(po_data),
    .probe6(frame_finished)
   ) ;




endmodule

