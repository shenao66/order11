module send (
    input wire       clk,
    input wire       rst_n,
    input wire       done,
    input wire [127:0] memory,
    output reg [7:0] po_data,
    output reg       po_flag
);

wire [7:0] data_mem [0:15];
    
assign data_mem[0] = memory[127:120];    
assign data_mem[1] = memory[119:112];    
assign data_mem[2] = memory[111:104];    
assign data_mem[3] = memory[103:96];    
assign data_mem[4] = memory[95:88];    
assign data_mem[5] = memory[87:80];    
assign data_mem[6] = memory[79:72];    
assign data_mem[7] = memory[71:64];    
assign data_mem[8] = memory[63:56];    
assign data_mem[9] = memory[55:48];    
assign data_mem[10] = memory[47:40];    
assign data_mem[11] = memory[39:32]; 
assign data_mem[12] = memory[31:24];
assign data_mem[13] = memory[23:16];
assign data_mem[14] = memory[15:8];
assign data_mem[15] = memory[7:0];





parameter idle =8'd0;
parameter s0 = 8'd1;
parameter s1 = 8'd2;
parameter s2 = 8'd3;
reg [7:0] state;
reg [7:0] cnt_byte_num;
always @(posedge clk , negedge rst_n) begin
    if(~rst_n)
        begin
            state <= idle;
            cnt_byte_num <= 8'd0;
            po_data <= 8'd0;
            po_flag <= 1'd0;
        end
    else
        case (state)
            idle:
                begin
                    if(done)
                        begin
                            state <= s0;
                            cnt_byte_num <= 8'd0;
                            po_data <= 8'd0;
                            po_flag <= 1'd0;
                        end
                    else
                        state <= state;
                end
            s0: 
                begin
                    po_data <= data_mem[cnt_byte_num];
                    state <= s1;
                    po_flag <= 1'd1;
                end
            s1:
                begin
                    po_flag <= 1'd0;
                    if(done)
                        begin
                            cnt_byte_num <= cnt_byte_num + 1'd1;
                            state <= s2;
                        end
                    else
                        state <= state;
                end 
            s2:
                begin
                    if(cnt_byte_num == 8'd16)
                        begin
                            state <= idle;
                            cnt_byte_num <= 8'd0;
                        end
                    else
                        state <= s0; 
                end
            default:
                begin
                    state <= idle;
                    cnt_byte_num <= 8'd0;
                end 
        endcase
end

ila_0 your_instance_name (
	.clk(clk), // input wire clk


	.probe0(memory) // input wire [7:0] probe0
);


endmodule
